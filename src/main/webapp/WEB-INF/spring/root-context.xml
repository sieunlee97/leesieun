<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- HSQLDB FILE기반 사용 헤로쿠에 올릴때 생성경로는 /tmp/embeded/hsql_file.db , 로컬PC일때 경로는 c:/egov/workspace/embeded/hsql_file.db -->   
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:file:c:/egov/workspace/embeded/hsql_file.db;hsqldb.lock_file=false" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>
	
	<!-- CREATE TABLE 초기 1회만 실행 -->
	<!-- 
	<jdbc:initialize-database data-source="dataSource" ignore-failures="DROPS"> 
		<jdbc:script location="classpath:/db/embeded_hsql_file.sql" /> 
	</jdbc:initialize-database>
	 -->
	<!-- jdbc:hsqldb:mem:dataSource / jdbc:hsqldb:file:c:/egov/workspace/embeded/hsql_file.db -->
	<!-- 테스트 실행용 DB매니저 실행:실제 사용시 아래 value - - 공백제거 하세요. -->
	<!-- 
	<bean depends-on="dataSource"
	class="org.springframework.beans.factory.config.MethodInvokingBean">
	<property name="targetClass" value="org.hsqldb.util.DatabaseManagerSwing" />
	<property name="targetMethod" value="main" />
	<property name="arguments">
		<list>
			<value>- -url</value>
			<value>jdbc:hsqldb:file:c:/egov/workspace/embeded/hsql_file.db</value>
			<value>- -user</value>
			<value>sa</value>
			<value>- -password</value>
			<value></value>
		</list>
	</property>
	</bean>
	 -->
	
	<!-- 로컬 mysql log4jdbc 설정전 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/edu"></property>
		<property name="username" value="root"></property>
		<property name="password" value="apmsetup"></property>
	</bean> -->
	
	<!-- 로컬 mysql log4jdbc 설정후 -->
	<!-- 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" 
				  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="url" 
				  value="jdbc:log4jdbc:mysql://127.0.0.1:3306/edu"></property>
		<property name="username" value="root"></property>
		<property name="password" value="apmsetup"></property>
	</bean>
	 -->
	<!--
		DataSource 설정으로 JDBC 연결후, MyBatis와 MySql을 연동시킴. 
		SqlSessionFactory : myBatis와 스프링의 Connection 생성후 쿼리 위치지정.
	 -->		 		
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">	   
	 	<property name="dataSource" ref="dataSource" />
	 	<!-- 매퍼 xml로만든 쿼리파일의 경로를 인식하게 함.(아래 classpath경로 src/main/resources/쿼리xml) -->
	 	 <property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
	</bean>
	
	<!-- 
		MyBatis에서 DAO를 이용하는 경우, SqlSessionTemplate라는 것을 이용해서 DAO를 구현함.
		DAO라는 것은 DataAccessObject 데이터핸들링(insert(),delete()등을 처리하는 클래스 DAO라고 합니다.
		개발자들이 직접 DB 연결, 종료작업하는 것을 줄여줌.
	 	sql세션템플릿을 호출할때 SqlSessionFactory를 생성자로 주입함.
	 -->
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
	  <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	 </bean>
	
	<context:component-scan base-package="org.edu.dao" />
	<context:component-scan base-package="org.edu.service" />
	<context:component-scan base-package="org.edu.vo" />
	<context:component-scan base-package="org.edu.aop" />
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<aop:config></aop:config>
	<!-- 대표적으로 상세보기에도 추가, 게시판 입력 트랜잭션에서 이용 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 배치작업 -->
	<bean id="herokuJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <property name="targetObject" ref="memberServiceImpl" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
	    <property name="targetMethod" value="herokuJobMethod" />
	    <!-- 동시 실행을 방지합니다. -->
	    <property name="concurrent" value="false" />
	</bean>
	<bean id="herokuJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="herokuJob" />
	    <!-- 월-금 오전 8시부터 23(미국시간0-14)시까지 사이에 20분 간격으로 실행 참조: https://nhj12311.tistory.com/283 -->
	    <property name="cronExpression" value="0 0/20 23,0-14 ? * MON,TUE,WED,THU,FRI" />
	</bean>
	<!-- 배치작업 테스트용 스케줄러 -->
	<bean id="herokuJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
	        <list><ref bean="herokuJobTrigger" /></list>
	    </property>
	</bean>
	
</beans>
